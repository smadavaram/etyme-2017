- is_editable =  candidate == current_candidate
- unless own
  #navbar.text-right
    = yield :statuses
.content-i.my-profile
  .content-box
    .row.p-4
      .col-sm-4.col-md-5.col-lg-4.col-xl-4
        .user-profile.compact
          .up-head-w{:style => "background-image:url(#{candidate.photo.blank? ? asset_path('avatars/m_sunny_big.png') : candidate.photo})"}
            - if own
              = link_to '#', class: 'profile--link', onclick: "upload_file_ajax(candidateLogoUpload)" do
                .up-main-info
                  %h2.up-header
                    %i.icon-feather-camera
                  %h2.up-header
                    = candidate.full_name
                  %h6.up-sub-header
                    = candidate.associated_company&.name&.capitalize if candidate.associated_company.present?
            -else
              .up-main-info
                %h2.up-header
                  = candidate.full_name
                %h6.up-sub-header
                  = candidate.associated_company&.name&.capitalize if candidate.associated_company.present?
          .up-controls
            .row
              .col-sm-6{style: "display: flex;justify-content: space-evenly;"}
                - if current_user.present?
                  = contact_widget(candidate.email,candidate.phone,nil,color: '#3E4B5B; !important',chat_link: chat_link(candidate))
                - else
                  = contact_widget(candidate.email,candidate.phone,nil,color: '#3E4B5B; !important',chat_link: register_path,remote_false: true)
              .col-sm-6.text-right
                - if own
                  - if candidate.candidates_resumes&.last.present?
                    %a#resume-link.btn.btn-primary.btn-sm{:href => candidate.candidates_resumes&.last.resume, download: true, target: '_blank'}
                      %i.os-icon.os-icon-arrow-down6
                      %span Resume
                  - else
                    No Resume Available
                - else
                  / - if candidate.candidates_resumes.try(:primary_resume).try(:first).try(:resume).present?

                  /   -#%a.btn.btn-primary.btn-sm{:href => ""}
                  /   = link_to candidate.candidates_resumes.primary_resume.first.resume, class: "btn btn-primary btn-sm", target: "_blank" do
                  /     %i.os-icon.os-icon-arrow-down6
                  /     %span Resume
                  / - else
                  = link_to static_candidate_resume_path(candidate), class: "btn btn-primary btn-sm", target: "_blank" do
                    %i.os-icon.os-icon-arrow-up6
                    %span Resume

          .up-contents
            .m-b
              .row.m-b
                .col-sm-6.b-r.b-b
                  .el-tablo.centered.padded-v
                    = candidate.exp_words.html_safe
                .col-sm-6.b-b
                  .el-tablo.centered.padded-v
                    .value
                      = candidate.clients.count
                    .label
                      Clients
              .bar-label-left.font-weight-bold.element-wrapper
                %div.d-flex.justify-content-between.element-header.align-items-center
                  %h4.m-0
                    Contact Information
                  - if is_editable
                    %a.d-flex.justify-content-end{href: onboarding_profile_path}
                      %i.fi-pencil.pr-2
                      %span.bold
                        Edit Information
                .os-progress-bar.primary
                  .bar-labels
                    .bar-label-left.font-weight-bold
                      %span Full Name
                    .bar-label-right
                      %span=do_ellipsis(candidate.full_name,15)
                      %span.text-success
                .os-progress-bar.primary
                  .bar-labels
                    .bar-label-left.font-weight-bold
                      %span Phone number
                    .bar-label-right
                      %span=mask(candidate.phone, 3, "*")
                      %span.text-success
                .os-progress-bar.primary
                  .bar-labels
                    .bar-label-left.font-weight-bold
                      %span Email
                    .bar-label-right
                      %span=mask(candidate&.email, 4, "*")
                      %span.text-success
                        = is_verify(!!candidate.confirmed_at)
                .os-progress-bar.primary
                  .bar-labels
                    .bar-label-left.font-weight-bold
                      %span Age
                    .bar-label-right
                      %span= pluralize((Date.today.to_s(:number).to_i - candidate.dob.to_s(:number).to_i) / 10000,'year') rescue 'N/A'
                      %span.text-success
                .os-progress-bar.primary
                  .bar-labels
                    .bar-label-left.font-weight-bold
                      %span Visa Status
                    .bar-label-right
                      %span=do_ellipsis(candidate.visas.last&.status,15)
                .os-progress-bar.primary
                  .bar-labels
                    .bar-label-left.font-weight-bold
                      %span Current Location
                    .bar-label-right
                      %span=do_ellipsis(Candidate.last.criminal_check.last&.address&.split(",")&.drop(1)&.join(","), 16)
                .os-progress-bar.primary
                  .bar-labels
                    .bar-label-left.font-weight-bold
                      %span SSN(YES / NO)
                    .bar-label-right
                      %span= candidate.ssn.present? ? 'Yes' : 'No'
                .os-progress-bar.primary
                  .bar-labels
                    .bar-label-left.font-weight-bold
                      %span Relocation
                    .bar-label-right
                      %span= candidate.relocation ? 'Yes' : 'No'
                %h6.my-4 Linked Information
                %div.d-flex.justify-content-between.flex-wrap.w-100
                  - if candidate.skypeid.present?
                    .os-progress-bar.primary.w-50.justify-content-center
                      .bar-labels
                        .bar-label-left.font-weight-bold.d-flex.align-items-center
                          %i.fi-social-skype
                          %span.ml-2=do_ellipsis(candidate.skypeid, 15)

                  - if candidate.facebook_url.present?
                    .os-progress-bar.primary.w-50.justify-content-center
                      .bar-labels
                        %a{href: candidate.facebook_url, target: "_blank"}
                          .bar-label-left.font-weight-bold.d-flex.align-items-center
                            %i.fi-social-facebook
                            %span.ml-2 Facebook

                  - if candidate.gtalk_url.present?
                    .os-progress-bar.primary.w-50.justify-content-center
                      .bar-labels
                        %a{href: candidate.gtalk_url, target: "_blank"}
                          .bar-label-left.font-weight-bold.d-flex.align-items-center
                            %i.fi-social-google-plus
                            %span.ml-2 Google

                  - if candidate.twitter_url.present?
                    .os-progress-bar.primary.w-50.justify-content-center
                      .bar-labels
                        %a{href: candidate.twitter_url, target: "_blank"}
                          .bar-label-left.font-weight-bold.d-flex.align-items-center
                            %i.fi-social-twitter
                            %span.ml-2 Twitter

                  - if candidate.linkedin_url.present?
                    .os-progress-bar.primary.w-50.justify-content-center
                      .bar-labels
                        %a{href: candidate.linkedin_url, target: "_blank"}
                          .bar-label-left.font-weight-bold.d-flex.align-items-center
                            %i.fi-social-linkedin
                            %span.ml-2 Linkedin

        .element-wrapper
          .element-box.px-4.py-3
            %div.d-flex.justify-content-between.element-header.align-items-center
              %h4.m-0
                Education

              - if is_editable
                %a.d-flex.justify-content-end{href: onboarding_profile_path}
                  %i.fi-pencil.pr-2
                  %span.bold
                    Add new
            %div
              - if candidate.educations.count == 0
                .gray-600 Add your Education
              - else
                - candidate.educations.each do |edu|
                  .os-progress-bar.primary
                    .bar-labels
                      .bar-label-left
                        %div
                          %p.m-0="#{edu.degree_title&.capitalize} - #{edu.institute&.capitalize}"
                        %div
                          %p.m-0.text-muted=[edu.degree_level, edu.completion_year && ", Graduated #{edu.completion_year.year}"].join

        .element-wrapper
          .element-box.px-4.py-3
            %div.d-flex.justify-content-between.element-header.align-items-center
              %h4.m-0
                Certification

              - if is_editable
                %a.d-flex.justify-content-end{href: onboarding_profile_path}
                  %i.fi-pencil.pr-2
                  %span.bold
                    Add new
            %div

              - if candidate.certificates.count == 0
                .gray-600 Add your Certifications
              - else
                - candidate.certificates.each do |cert|
                  .os-progress-bar
                    .bar-labels
                      .bar-label-left
                        %div
                          %p.m-0="#{cert.title} - #{cert.institute&.capitalize}"
                        %div
                          %p.m-0.text-muted="#{cert.start_date&.year} - #{cert.end_date&.year}"
        .element-wrapper
          .element-box.px-4.py-3
            %div.d-flex.justify-content-between.element-header.align-items-center
              %h4.m-0
                Skills

              - if is_editable
                %a.d-flex.justify-content-end{href: onboarding_profile_path}
                  %i.fi-pencil.pr-2
                  %span.bold
                    Add new
            .element-info.border-0
              .element-info-text
                %ol{:class => ("sortable" if current_company ), "data-update-url" => sort_skills_company_candidate_path(candidate.id) }
                  - candidate.skill_taggings.order(:position).each do |skill|
                    %li.badge.badge-primary.p-2.m-1{:id => dom_id(skill)}
                      = skill.tag.name

      .col-sm-8.col-xl-8
        .col-sm-12
          .element-wrapper
            .element-box
              %div.d-flex.justify-content-between.align-items-center.element-info
                .element-info-with-icon
                  .element-info-icon.m-0
                    %i.icon-notebook
                  .element-info-text.m-0
                    %h4.element-inner-header Portfolio

                - if is_editable
                  %a.d-flex.justify-content-end{href: onboarding_profile_path}
                    %i.fi-pencil.pr-2
                    %span.bold
                      Add new
              %div.d-flex.w-100.justify-content-center
                - if candidate.designations.with_no_client.present?
                  .portfolio-slick
                    - candidate.designations.with_no_client.each do |client|
                      - client.portfolios.each do |portfolio|
                        - if url_image?(portfolio.cover_photo)
                          %div.slide-container
                            %img{src: portfolio.cover_photo}
                        - if url_video?(portfolio.cover_photo)
                          %div.slide-container
                            %video{controls: true}
                              %source{src: portfolio.cover_photo}
                    %div#tags.slide-container
                    %div#clients.slide-container
                - else
                  .portfolio-slick
                    %div#tags.slide-container
                    %div#clients.slide-container
            .element-box
              %div.d-flex.justify-content-between.align-items-center.element-info
                .element-info-with-icon.w-50
                  .element-info-icon
                    %i.icon-badge
                  .element-info-text
                    %h4.element-inner-header.m-0 About Summary
              %div.d-flex.justify-content-between.align-items-center.element-info
                - if candidate.about_summary.present?
                  %p.break-text
                    = candidate.about_summary
                - else
                  .element-info-text
                    .mb-2
                      %div
                        %span.mb-1.h6.d-block.text-secondary There is no About Summary

            .element-box
              %div.d-flex.justify-content-between.align-items-center.element-info
                .element-info-with-icon.w-50
                  .element-info-icon
                    %i.icon-badge
                  .element-info-text
                    %h4.element-inner-header.m-0 Employment History

                - if is_editable
                  %a.d-flex.justify-content-end{href: onboarding_profile_path}
                    %i.fi-pencil.pr-2
                    %span.bold
                      Add new
              - if candidate.designations.present? || (candidate.ever_worked_with_company && candidate.clients.present?)
                .element-info
                  .element-info-text
                    .mb-2
                      %table
                        %tr
                          %th Sr No.
                          %th Organization
                          %th Industry
                          %th From
                          %th To
                          %th Role
                        - candidate.designations.with_no_client.each_with_index do |designation, idx|
                          %tr
                            %td= idx+1
                            %td= designation.comp_name
                            %td= designation.company_role
                            %td= designation.start_date&.strftime('%B-%Y')
                            %td= designation.end_date&.strftime('%B-%Y')
                            %td= designation.nature_of_work

              - else
                .element-info
                  .element-info-text
                    .mb-2
                      %div
                        %span.mb-1.h6.d-block.text-secondary There is no work Experience
                      .element-inner-desc
                        -if own
                          %P
                            = link_to "Add New One", '/onboarding_profile?tag=skill'
            .element-box
              %div.d-flex.justify-content-between.align-items-center.element-info
                .element-info-with-icon.w-50
                  .element-info-icon
                    %i.icon-badge
                  .element-info-text
                    %h4.element-inner-header.m-0 Project History

                - if is_editable
                  %a.d-flex.justify-content-end{href: onboarding_profile_path}
                    %i.fi-pencil.pr-2
                    %span.bold
                      Add new
              - if candidate.designations.with_no_client.present?
                - candidate.designations.with_no_client.each do |designation|
                  - designation.designation_projects.each do |project|
                    .element-info
                      .element-info-text
                        .mb-2
                          .project-header
                            %h6.mb-1.text-primary
                              = project.project_name&.titleize
                              , #{project.location&.titleize}
                            %strong.font-weight-bold.font-sm.text-capitalize{:style => "color: gray;"}
                              = project.start_date&.strftime('%B-%Y')
                              \-  #{project.end_date&.strftime('%B-%Y')}
                          .project-description{:style => "margin-top: 12px;font-size: 16px;line-height: 25px;"}
                            %div= project.project_description.html_safe
                            .job-description{:style => "margin-top: 12px;font-size: 16px;line-height: 25px;"}
                              %strong.font-weight-bold.font-sm.text-capitalize{:style => "color: gray;"} Job description
                              %div
                                = project.job_description.html_safe

              - else
                .element-info
                  .element-info-text
                    .mb-2
                      %div
                        %span.mb-1.h6.d-block.text-secondary There is no work Experience
                      .element-inner-desc
                        -if own
                          %P
                            = link_to "Add New One", '/onboarding_profile?tag=skill'

%script{:src => "https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"}
%script{:src => "https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js"}

/ Tag cloud
%link{:href => "http://www.jqueryscript.net/css/jquerysctipttop.css", :rel => "stylesheet", :type => "text/css"}
%link{:href => "/jqcloud/jqcloud.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}
%script{:src => "/jqcloud/jqcloud-1.0.4.js", :type => "text/javascript"}

- content_for :head do
  %link{:href => "https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.css", :rel => "stylesheet", :type => "text/css"}
  %link{:href => "https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.5.8/slick-theme.min.css", :rel => "stylesheet", :type => "text/css"}

:css
  ol {
    padding-inline-start: 0px;
  }

  table {
    font-family: arial, sans-serif;
    border-collapse: collapse;
    width: 100%;
  }

  td, th {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
  }

  tr:nth-child(even) {
    background-color: #dddddd;
  }

:javascript
  var tags = #{raw @tags.to_json};
  var clients = #{raw @clients.to_json};

  $(document).ready(function() {
    $(function() {
      $('.sortable').sortable(
        {
          axis: "x, y",
          update: function() {
            $.post($(this).data('update-url'), $(this).sortable('serialize'));
          }
        }
      );
    });

    $(".slick-track").css("width", "600px");

    (function( $ ) {
      "use strict";
      $.fn.jQCloud = function(word_array, options) {
        // Reference to the container element
        var $this = this;
        // Namespace word ids to avoid collisions between multiple clouds
        var cloud_namespace = $this.attr('id') || Math.floor((Math.random()*1000000)).toString(36);

        // Default options value
        var default_options = {
          width: $this.width(),
          height: $this.height(),
          center: {
            x: ((options && options.width) ? options.width : $this.width()) / 2.0,
            y: ((options && options.height) ? options.height : $this.height()) / 2.0
          },
          delayedMode: word_array.length > 50,
          shape: false, // It defaults to elliptic shape
          encodeURI: true,
          removeOverflowing: true
        };

        options = $.extend(default_options, options || {});

        // Add the "jqcloud" class to the container for easy CSS styling, set container width/height
        $this.addClass("jqcloud").width(options.width).height(options.height);

        // Container's CSS position cannot be 'static'
        if ($this.css("position") === "static") {
          $this.css("position", "relative");
        }

        var drawWordCloud = function() {
          // Helper function to test if an element overlaps others
          var hitTest = function(elem, other_elems) {
            // Pairwise overlap detection
            var overlapping = function(a, b) {
              if (Math.abs(2.0*a.offsetLeft + a.offsetWidth - 2.0*b.offsetLeft - b.offsetWidth) < a.offsetWidth + b.offsetWidth) {
                if (Math.abs(2.0*a.offsetTop + a.offsetHeight - 2.0*b.offsetTop - b.offsetHeight) < a.offsetHeight + b.offsetHeight) {
                  return true;
                }
              }
              return false;
            };
            var i = 0;
            // Check elements for overlap one by one, stop and return false as soon as an overlap is found
            for(i = 0; i < other_elems.length; i++) {
              if (overlapping(elem, other_elems[i])) {
                return true;
              }
            }
            return false;
          };

          // Make sure every weight is a number before sorting
          for (var i = 0; i < word_array.length; i++) {
            word_array[i].weight = parseFloat(word_array[i].weight, 10);
          }

          // Sort word_array from the word with the highest weight to the one with the lowest
          word_array.sort(function(a, b) { if (a.weight < b.weight) {return 1;} else if (a.weight > b.weight) {return -1;} else {return 0;} });

          var step = (options.shape === "rectangular") ? 18.0 : 2.0,
              already_placed_words = [],
              aspect_ratio = options.width / options.height;

          // Function to draw a word, by moving it in spiral until it finds a suitable empty place. This will be iterated on each word.
          var drawOneWord = function(index, word) {
            // Define the ID attribute of the span that will wrap the word, and the associated jQuery selector string
            var word_id = cloud_namespace + "_word_" + index,
                word_selector = "#" + word_id,
                angle = 6.28 * Math.random(),
                radius = 0.0,

                // Only used if option.shape == 'rectangular'
                steps_in_direction = 0.0,
                quarter_turns = 0.0,

                weight = 5,
                custom_class = "",
                inner_html = "",
                word_span;

            // Extend word html options with defaults
            word.html = $.extend(word.html, {id: word_id});

            // If custom class was specified, put them into a variable and remove it from html attrs, to avoid overwriting classes set by jQCloud
            if (word.html && word.html["class"]) {
              custom_class = word.html["class"];
              delete word.html["class"];
            }

            // Check if min(weight) > max(weight) otherwise use default
            if (word_array[0].weight > word_array[word_array.length - 1].weight) {
              // Linearly map the original weight to a discrete scale from 1 to 10
              weight = Math.round((word.weight - word_array[word_array.length - 1].weight) /
                                  (word_array[0].weight - word_array[word_array.length - 1].weight) * 9.0) + 1;
            }
            word_span = $('<span>').attr(word.html).addClass('w' + weight + " " + custom_class);

            // Append link if word.url attribute was set
            if (word.link) {
              // If link is a string, then use it as the link href
              if (typeof word.link === "string") {
                word.link = {href: word.link};
              }

              // Extend link html options with defaults
              if ( options.encodeURI ) {
                word.link = $.extend(word.link, { href: encodeURI(word.link.href).replace(/'/g, "%27") });
              }

              inner_html = $('<a>').attr(word.link).text(word.text);
            } else {
              inner_html = word.text;
            }
            word_span.append(inner_html);

            // Bind handlers to words
            if (!!word.handlers) {
              for (var prop in word.handlers) {
                if (word.handlers.hasOwnProperty(prop) && typeof word.handlers[prop] === 'function') {
                  $(word_span).bind(prop, word.handlers[prop]);
                }
              }
            }

            $this.append(word_span);

            var width = word_span.width(),
                height = word_span.height(),
                left = options.center.x - width / 2.0,
                top = options.center.y - height / 2.0;

            // Save a reference to the style property, for better performance
            var word_style = word_span[0].style;
            word_style.position = "absolute";
            word_style.left = left + "px";
            word_style.top = top + "px";

            while(hitTest(word_span[0], already_placed_words)) {
              // option shape is 'rectangular' so move the word in a rectangular spiral
              if (options.shape === "rectangular") {
                steps_in_direction++;
                if (steps_in_direction * step > (1 + Math.floor(quarter_turns / 2.0)) * step * ((quarter_turns % 4 % 2) === 0 ? 1 : aspect_ratio)) {
                  steps_in_direction = 0.0;
                  quarter_turns++;
                }
                switch(quarter_turns % 4) {
                  case 1:
                    left += step * aspect_ratio + Math.random() * 2.0;
                    break;
                  case 2:
                    top -= step + Math.random() * 2.0;
                    break;
                  case 3:
                    left -= step * aspect_ratio + Math.random() * 2.0;
                    break;
                  case 0:
                    top += step + Math.random() * 2.0;
                    break;
                }
              } else { // Default settings: elliptic spiral shape
                radius += step;
                angle += (index % 2 === 0 ? 1 : -1)*step;

                left = options.center.x - (width / 2.0) + (radius*Math.cos(angle)) * aspect_ratio;
                top = options.center.y + radius*Math.sin(angle) - (height / 2.0);
              }
              word_style.left = left + "px";
              word_style.top = top + "px";
            }

            // Don't render word if part of it would be outside the container
            if (options.removeOverflowing && (left < 0 || top < 0 || (left + width) > options.width || (top + height) > options.height)) {
              word_span.remove()
              return;
            }


            already_placed_words.push(word_span[0]);

            // Invoke callback if existing
            if ($.isFunction(word.afterWordRender)) {
              word.afterWordRender.call(word_span);
            }
          };

          var drawOneWordDelayed = function(index) {
            index = index || 0;
            if (!$this.is(':visible')) { // if not visible then do not attempt to draw
              setTimeout(function(){drawOneWordDelayed(index);},10);
              return;
            }
            if (index < word_array.length) {
              drawOneWord(index, word_array[index]);
              setTimeout(function(){drawOneWordDelayed(index + 1);}, 10);
            } else {
              if ($.isFunction(options.afterCloudRender)) {
                options.afterCloudRender.call($this);
              }
            }
          };

          // Iterate drawOneWord on every word. The way the iteration is done depends on the drawing mode (delayedMode is true or false)
          if (options.delayedMode){
            drawOneWordDelayed();
          }
          else {
            $.each(word_array, drawOneWord);
            if ($.isFunction(options.afterCloudRender)) {
              options.afterCloudRender.call($this);
            }
          }
        };

        // Delay execution so that the browser can render the page before the computatively intensive word cloud drawing
        setTimeout(function(){drawWordCloud();}, 10);
        return $this;
      };
    })(jQuery);

    slider_count = $(".slide-container").length

    if (slider_count == 2){
      $("#slick-slide00").empty().jQCloud(tags);
      $("#slick-slide01").empty().jQCloud(clients);

      $(this).delay(100).queue(function() {
        $("#slick-slide00").empty().jQCloud(tags);
        $("#slick-slide01").empty().jQCloud(clients);
        $(this).dequeue();
      });

    }else{
      $("#slick-slide0"+(slider_count-2)).empty().jQCloud(tags);
      $("#slick-slide0"+(slider_count-1)).empty().jQCloud(clients);

      $(this).delay(100).queue(function() {
        $("#slick-slide0"+(slider_count-2)).empty().jQCloud(tags);
        $("#slick-slide0"+(slider_count-1)).empty().jQCloud(clients);
        $(this).dequeue();
      });

    }



  });

  $('.portfolio-slick').slick({
    infinite: true,
    slidesToShow: 1,
    dots:true,
    arrows: true,
    speed: 500,
    fade: true,
  });

  window.onscroll = function() {myFunction()};
  var navbar = document.getElementById("navbar");
  var sticky = navbar.offsetTop;

  function myFunction() {
    if (window.pageYOffset >= sticky) {
      navbar.classList.add("sticky")
    } else {
      navbar.classList.remove("sticky");
    }
  }

  function candidateLogoUpload(url,type){
    photo_url = url
    $('.profile-pic').html('');
    $.ajax({
     type: 'POST',
     dataType: 'json',
     url: "#{ candidate_update_photo_path }",
     data: { photo: photo_url,authenticity_token: window._token },
     success: function (data) {
      $('.img_pic').removeClass('hidden').attr("src",photo_url);
      $('.img_pic_r').remove();
      location.reload();
     }
   });
  }
