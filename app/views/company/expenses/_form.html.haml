#content
  .row
  %section
    .row
      = form_for @expense , html:{class: 'form-horizontal'}  do |f|
        %article.col-sm-12.col-md-12.col-lg-12
          #wid-id-0.jarviswidget{"data-widget-deletebutton" => "false", "data-widget-editbutton" => "false"}
            %header
              %span.widget-icon
                %i.fa.fa-check
              %h2 Adding New Expense
            %div
              .jarviswidget-editbox
              .widget-body
                .row
                  .col-md-3
                    %label Bill Type
                  .col-md-4
                    = f.select :bill_type, Expense.bill_types.take(2).map { |key, value| [key.titleize, key] } , {class: "form-control"}

                .row
                  .col-md-3
                    %label Contract
                  .col-md-4
                    = f.select :contract_id, options_for_select(Contract.where(status: 'in_progress').map{|c| [c.title,c.id] }),{required: true, prompt: 'Select Contract' }

                %br
                .row
                  .col-md-3
                    %label.contract_type Consultant
                  .col-md-4
                    = f.hidden_field :account_id
                    = text_field_tag :account_name, '', class: 'expense_account_name', readonly: true

                %br
                .row
                  .col-md-3.form-group
                    %label{:for => "mailing_address"} Mailing Address:
                    = f.text_area :mailing_address, class: 'form-control'

                  .col-md-2
                    %label{:for => "terms"} Terms:
                    = f.select :terms, options_for_select((0..10).to_a.map{ |e| 'Net '+e.to_s}), {required: true }

                  .col-md-2
                    %label{:for => 'bill_date'} Bill Date:
                    = f.date_field :bill_date, class: 'form-control'

                  .col-md-2
                    %label{:for => 'due_date'} Due Date:
                    = f.date_field :due_date , class: 'form-control'

                  .col-md-2
                    %label{:for => 'bill_no'} Bill no.
                    = f.text_field :bill_no, class: 'form-control'
                

                %br
                .row
                  .col-md-2
                    %label
                      %b
                        Account details:

                %br
                .row
                  .col-md-2.text-center
                    Expense type
                  .col-md-2.text-center
                    Description
                  .col-md-2.text-center
                    Status
                  .col-md-2.text-center
                    Amount
                  .col-md-2.text-center
                    Action

                = f.nested_fields_for :expense_accounts do |ff|
                  = ff.object.expense_type
                  .row.mt-2
                    .col-md-2
                      .plain-select
                        = ff.select  :expense_type_id, '', {}, class: "form-control select_expense_types"
                    .col-md-2
                      = ff.text_area :description, class: 'form-control', cols: "2", rows: "2"
                    .col-md-2
                      = ff.select :status, ExpenseAccount.statuses.map { |key, value| [key.titleize, key] } , {class: "form-control" , required: true}
                    .col-md-2
                      = ff.number_field :amount, class: 'form-control expense_amount'
                    .col-md-2.text-center
                      = ff.remove_nested_fields_link 'Remove'
                %br
                = f.add_nested_fields_link :expense_accounts, 'Add row', class: 'btn btn-primary add_row'
                %br
                %br
                .row
                  .col-md-3
                    = f.label :attachment
                    %br
                    = f.filepicker_field :attachment, class: 'file-pick timesheet-filepicker-attachment'

                  .col-md-4 

                  .col-md-4.total-amount
                    %label{:for => 'total_amount'} Total amount:
                    = f.text_field :total_amount, readonly: true

                %br
                = f.submit 'Submit', class: 'btn btn-primary'

.remote_container_contract
= render "company/expenses/new_expense_type", for_remote: true

- content_for :scripts do
  :javascript 

    $(document).ready(function() {
      $('.add_row').click();
      var count = 0;
      set_expense_type_select('#expense_expense_accounts_attributes_0_expense_type_id', "Please select");
      var expense_terms = $( "#expense_terms option:selected" ).val().split("Net")[1];
      var due_date = "";
      $('#expense_terms').on('change', function() {
        expense_terms = $( "#expense_terms option:selected" ).val().split("Net")[1];
        var date = new Date($( "#expense_bill_date" ).val()),
        days = parseInt(expense_terms, 10);
        if(!isNaN(date.getTime())){
            dd = new Date(date.setDate(date.getDate() + days));
            due_date =  dd.getFullYear() + "-" + ("0" + (dd.getMonth() + 1)).slice(-2)+ "-" + ("0" + dd.getDate()).slice(-2)

            $("#expense_due_date").val(due_date);
        }
      });

      $('#expense_bill_date').on('change', function() {

        var date = new Date($( "#expense_bill_date" ).val()),
        days = parseInt(expense_terms, 10);
        if(!isNaN(date.getTime())){
            dd = new Date(date.setDate(date.getDate() + days));
            due_date =  dd.getFullYear() + "-" + ("0" + (dd.getMonth() + 1)).slice(-2)+ "-" + ("0" + dd.getDate()).slice(-2)

            $("#expense_due_date").val(due_date);
        }

      });

      $('.add_row').on('click', function(){
        count = count + 1;
        select_id = "#expense_expense_accounts_attributes_"+count+"_expense_type_id"
        setTimeout(
            function() {
              set_expense_type_select(select_id, "Please select");  
            },
            500);
      })

      $('.remove_nested_fields_link').on('click', function(){
        count = count -1;
      })
     
      $(document).on("change",".expense_amount", function() {
        var sum = 0;
        $('.expense_amount').each(function(){
            sum += parseFloat(this.value);
        });
        $('#expense_total_amount').val(sum)
      });

      $(document).on("change","#expense_contract_id", function() {
        $.ajax({
          url: "/api/select_searches/find_contract_candidate",
          type: 'GET',
          data: {contract_id: $('#expense_contract_id option:selected').val()},
          dataType: 'JSON'
        }).done(function(data){         
          if (data.buy_contracts[0].contract_type == 'C2C'){
            $('.contract_type').text('Vendor Company');
            $('#expense_account_id').val(data.buy_contracts[0].company_id);
            $('.expense_account_name').val(data.buy_contracts[0].company.name);
          }
          else{
            $('#expense_account_id').val(data.candidate.id);
            $('.expense_account_name').val(data.candidate.first_name + ' ' +data.candidate.last_name);
            $('.contract_type').text('Consultant');
          }
        });

      });
    }); 
