<section class="content-wrapper">
    <%= stylesheet_link_tag "mycompany" %>
    <%= javascript_include_tag "cable" %>
    <style>
    .bot_style{
        background: none  !important;
        border: none !important;
        margin: 0px;
        padding: 0px;
    }
    .bot_style:hover {
        outline: none !important;
    }
    .bot_style:focus {
        outline: none !important;
    }
    .imag_css{
    height: 17px;
    width: 17px;
    margin-right: 5px;
    border-radius: 50%;
    }
    .imag_css_for_pic{
        margin-left:7px
    }
    .scrool::-webkit-scrollbar {
    width: 8px;
    margin: 3px;
}
    /* Track */
    .scrool::-webkit-scrollbar-track {
        box-shadow: inset 0 0 5px white;
        border-radius: 5px;
    }

    /* Handle */
    .scrool::-webkit-scrollbar-thumb {
        background: #047bf8;
        border-radius: 10px;
    }

    /* Handle on hover */
    .scrool::-webkit-scrollbar-thumb:hover {
        background: #047bf8;
    }


    </style>
    <div class="container-fluid">
        <div class="row">
            <%= render 'static/shared/webflow_header' %>
            <div class="col-12 content-main">
                <div class="tab-content">
                    <div class="tab-pane fade show active">
                        <div class="row">
                            <div class="col-12 col-xl-9 feed-main">
                                <div class="row mx-1 align-items-stretch mt-3">
                                    <% if @candidates.present? %>
                                    <% @candidates.each_with_index do |c , index| %>
                                    <div class="col-12 col-xl-4 mb-4">
                                        <div class="people-card d-flex flex-column h-100">
                                            <% @c_bench_job = JobInvitation.find_by(recipient_id: c&.candidate&.id, company_id: c&.company&.id) %>
                                            <div class="cover-img" id="tag-<%=index%>" tag-value="tag-<%=index%>" >
                                             <div class="candidate-name people-card-header flex-fill ">
                                                <% if c&.candidate&.candidate_title.present? %>
                                                <%= c&.candidate&.candidate_title %>
                                                <% end %>
                                            </div>
                                            <div class= "skill-list">
                                              <% if c&.candidate&.skills.any? %>
                                                    <ul class="level1 ">
                                                        <% c.candidate.skills.each do |skill| %>
                                                            <li class="item">
                                                                <%= skill.name %>
                                                            </li>
                                                        <% end %>
                                                    </ul>   
                                              <% end %>
                                             </div>
                                                <%# <%= link_to (image_tag "#{c&.candidate&.designations&.with_no_client.present? ? c&.candidate.designations.with_no_client&.first&.portfolios&.first&.cover_photo : asset_path('') }", alt: "cover"), public_profile_static_candidates_path(c&.candidate), target: "_blank"  %> 
                                            </div>

                                            <div class="people-card-header d-flex justify-content-between">
                                                <div class="media">
                                                    <%= link_to user_mini_avatar(c&.candidate), public_profile_static_candidates_path(c&.candidate), target: "_blank" %>
                                                    <%if c&.candidate&.display_name.present? %>
                                                     <%= link_to c&.candidate&.display_name, public_profile_static_candidates_path(c&.candidate), target: "_blank" %>
                                                    <%else%>
                                                     <%= link_to c&.candidate&.first_name + " "+c&.candidate&.last_name[0]+"..." ,  public_profile_static_candidates_path(c&.candidate), target: "_blank" %>
                                                    <% end %>
                                                </div>
                                                <div>
                                                    <%# <p class="m-0 f-12 f-mon-sembol txt-light"><%= c&.candidate&.location&.country %1></p> %>
                                                </div>
                                            </div>

                                          

                                            <div class="people-card-footer d-flex justify-content-between mb-3">
                                                <div class="card-footer-icons d-flex">

                                                    <!-- Like Icon -->
                                                   <% if current_user.nil? and current_candidate.nil? %>
                                                    <div class="card-footer-like mr-2"  id="like-button-<%= c.id %>">
                                                        <%= image_tag 'hearth.svg', class: "img-fluid", alt: "Like" %>
                                                    </div>
                                                    <script type="text/javascript" charset="utf-8">
                                                        $('#like-button-<%= c.id %>').click(function (){
                                                            alert('You must be logged in to like a candidate');
                                                        })
                                                    </script>
                                                  <% else %>
                                                    <div class="card-footer-like mr-2" id="like-button">
                                                      <%= image_tag 'hearth.svg', class: "img-fluid", alt: "Like" %>
                                                    </div>


                                                  <% end  %>





                                                    <!-- Chat Icon -->




                                                       <%c_candidate = c&.candidate_id%>
                                                       <%c_candidate_obj = Candidate.find_by(id: c_candidate)%>
                                                       <% c_recruiter = User.find_by(id: c_candidate_obj&.recruiter_id)%>
                                                    <div class="logged-user-role d-flex justify-content-center align-items-center pl-2  <%= "border border-light rounded" if c_recruiter %>"  style="border-color: grey !important;">

                                                          <% if current_user.nil? and current_candidate.nil? %>
                                                            <button id="chat-button-<%= c.id %>" class="bot_style"><%= image_tag 'reply.svg', class: "img-fluid mr-2", alt: "Chat" %></button>

                                                            <script type="text/javascript" charset="utf-8">
                                                                $('#chat-button-<%= c.id %>').click(function (){
                                                                    alert('You must be logged in to chat.');
                                                                })
                                                            </script>

                                                        <% else %>
                                                            <%if c_recruiter.present? && current_user != c_recruiter%>
                                                                <button onclick="recruiter_button(<%= c_recruiter.id %>)" class="bot_style"><%= image_tag 'reply.svg', class: "img-fluid mr-2", alt: "Chat" %></button>
                                                            <%else%>
                                                                 <button onclick="candidate_button(<%= c_candidate_obj.id %>)" class="bot_style"><%= image_tag 'reply.svg', class: "img-fluid me-2", alt: "Chat" %></button>
                                                            <%end%>
                                                            <% end %>


                                                        <div class="logged-user-role d-block">
                                                            <%if c_recruiter.present?%>
                                                              <%= chat_recruiter_link_image(c_recruiter) %>
                                                            <%end%>
                                                        </div>
                                                    </div>
                                                </div>





                                                <!-- Price -->
                                                <% if @c_bench_job.present? && @c_bench_job&.min_hourly_rate.present? && @c_bench_job&.max_hourly_rate.present? %>
                                                <div class="pl-2">
                                                    <p class="d-inline-block card-people-footer-max-rate mb-0 mr-1">
                                                        <del>
                                                            <%= "$#{@c_bench_job.present? && @c_bench_job&.max_hourly_rate.present? ? number_with_precision(@c_bench_job&.max_hourly_rate, precision: 2) : ""}/hr" %>
                                                        </del>
                                                    </p>
                                                    <p class="d-inline-block card-people-footer-min-rate mb-0">
                                                        <%= "$#{@c_bench_job.present? && @c_bench_job&.min_hourly_rate.present? ? number_with_precision(@c_bench_job&.min_hourly_rate, precision: 2) : ""}/hr" %>
                                                    </p>
                                                </div>
                                                <% end %>
                                            </div>
                                        </div>
                                    </div>
                                    <% end %>
                                    <% else %>
                                    <div>No People Available</div>
                                    <% end %>
                                </div>
                                <% if @candidates.present? %>
                                <div class="mt-3">
                                    <%= digg_pagination(@candidates ,class: "pagination ")%>
                                </div>
                                <% end %>
                            </div>
                            <%= render 'static/shared/webflow_sidebar_right' %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<link href="http://www.jqueryscript.net/css/jquerysctipttop.css" rel="stylesheet" type="text/css"></link>
<link href="/jqcloud/jqcloud.css" media="screen" rel="stylesheet" type="text/css"></link>
<script src="/jqcloud/jqcloud-1.0.4.js" type="text/javascript"></script>
<%= javascript_include_tag 'shared/hide_show_toggler'%>
<script>
    $(".openbtn").click(function() {
        $(".side-wrapper").toggleClass("side-active")
    });
    function recruiter_button(recruiter){
          $.ajax({
              url: `/company/conversations/mini_chat`,
              type: "GET",
              dataType: "script",
              data: {recruiter:recruiter},
              success: function (data) {
              }
          });
    }

    function candidate_button(candidate){
          $.ajax({
              url: `/company/conversations/mini_chat`,
              type: "GET",
              dataType: "script",
              data: {candidate: candidate},
              success: function (data) {
                  
              }
          });
    };
</script>
<script>
    var word_array = [
          {text: "Lorem", weight: 15},
          {text: "Ipsum", weight: 9, link: "http://jquery.com/"},
          {text: "Dolor", weight: 6, html: {title: "I can haz any html attribute"}},
          {text: "Sit", weight: 7},
          {text: "Amet", weight: 5}
          // ...as many words as you want
      ];
    $("#search_query").change(function () {
        const urlParams = new URLSearchParams(window.location.search);
        let goto_url = ''
        urlParams.set('input_search', $('#search_query').val() );
        goto_url = '<%= static_people_path %>' + '?' + urlParams.toString();
        window.location = goto_url;
    });
    
    $(document).ready(function() {    
      (function( $ ) {
        "use strict";
        $.fn.jQCloud = function(word_array, options) {
          // Reference to the container element
          var $this = this;
          // Namespace word ids to avoid collisions between multiple clouds
          var cloud_namespace = $this.attr('id') || Math.floor((Math.random()*1000000)).toString(36);

          // Default options value
          var default_options = {
            width: $this.width(),
            height: $this.height(),
            center: {
              x: ((options && options.width) ? options.width : $this.width()) / 2.0,
              y: ((options && options.height) ? options.height : $this.height()) / 2.0
            },
            delayedMode: word_array.length > 50,
            shape: false, // It defaults to elliptic shape
            encodeURI: true,
            removeOverflowing: true
          };

          options = $.extend(default_options, options || {});

          // Add the "jqcloud" class to the container for easy CSS styling, set container width/height
          $this.addClass("jqcloud").width(options.width).height(options.height);

          // Container's CSS position cannot be 'static'
          if ($this.css("position") === "static") {
            $this.css("position", "relative");
          }

          var drawWordCloud = function() {
            // Helper function to test if an element overlaps others
            var hitTest = function(elem, other_elems) {
              // Pairwise overlap detection
              var overlapping = function(a, b) {
                if (Math.abs(2.0*a.offsetLeft + a.offsetWidth - 2.0*b.offsetLeft - b.offsetWidth) < a.offsetWidth + b.offsetWidth) {
                  if (Math.abs(2.0*a.offsetTop + a.offsetHeight - 2.0*b.offsetTop - b.offsetHeight) < a.offsetHeight + b.offsetHeight) {
                    return true;
                  }
                }
                return false;
              };
              var i = 0;
              // Check elements for overlap one by one, stop and return false as soon as an overlap is found
              for(i = 0; i < other_elems.length; i++) {
                if (overlapping(elem, other_elems[i])) {
                  return true;
                }
              }
              return false;
            };

            // Make sure every weight is a number before sorting
            for (var i = 0; i < word_array.length; i++) {
              word_array[i].weight = parseFloat(word_array[i].weight, 10);
            }

            // Sort word_array from the word with the highest weight to the one with the lowest
            word_array.sort(function(a, b) { if (a.weight < b.weight) {return 1;} else if (a.weight > b.weight) {return -1;} else {return 0;} });

            var step = (options.shape === "rectangular") ? 18.0 : 2.0,
                already_placed_words = [],
                aspect_ratio = options.width / options.height;

            // Function to draw a word, by moving it in spiral until it finds a suitable empty place. This will be iterated on each word.
            var drawOneWord = function(index, word) {
              // Define the ID attribute of the span that will wrap the word, and the associated jQuery selector string
              var word_id = cloud_namespace + "_word_" + index,
                  word_selector = "#" + word_id,
                  angle = 6.28 * Math.random(),
                  radius = 0.0,

                  // Only used if option.shape == 'rectangular'
                  steps_in_direction = 0.0,
                  quarter_turns = 0.0,

                  weight = 5,
                  custom_class = "",
                  inner_html = "",
                  word_span;

              // Extend word html options with defaults
              word.html = $.extend(word.html, {id: word_id});

              // If custom class was specified, put them into a variable and remove it from html attrs, to avoid overwriting classes set by jQCloud
              if (word.html && word.html["class"]) {
                custom_class = word.html["class"];
                delete word.html["class"];
              }

              // Check if min(weight) > max(weight) otherwise use default
              if (word_array[0].weight > word_array[word_array.length - 1].weight) {
                // Linearly map the original weight to a discrete scale from 1 to 10
                weight = Math.round((word.weight - word_array[word_array.length - 1].weight) /
                                    (word_array[0].weight - word_array[word_array.length - 1].weight) * 9.0) + 1;
              }
              word_span = $('<span>').attr(word.html).addClass('w' + weight + " " + custom_class);

              // Append link if word.url attribute was set
              if (word.link) {
                // If link is a string, then use it as the link href
                if (typeof word.link === "string") {
                  word.link = {href: word.link};
                }

                // Extend link html options with defaults
                if ( options.encodeURI ) {
                  word.link = $.extend(word.link, { href: encodeURI(word.link.href).replace(/'/g, "%27") });
                }

                inner_html = $('<a>').attr(word.link).text(word.text);
              } else {
                inner_html = word.text;
              }
              word_span.append(inner_html);

              // Bind handlers to words
              if (!!word.handlers) {
                for (var prop in word.handlers) {
                  if (word.handlers.hasOwnProperty(prop) && typeof word.handlers[prop] === 'function') {
                    $(word_span).bind(prop, word.handlers[prop]);
                  }
                }
              }

              $this.append(word_span);

              var width = word_span.width(),
                  height = word_span.height(),
                  left = options.center.x - width / 2.0,
                  top = options.center.y - height / 2.0;

              // Save a reference to the style property, for better performance
              var word_style = word_span[0].style;
              word_style.position = "absolute";
              word_style.left = left + "px";
              word_style.top = top + "px";

              while(hitTest(word_span[0], already_placed_words)) {
                // option shape is 'rectangular' so move the word in a rectangular spiral
                if (options.shape === "rectangular") {
                  steps_in_direction++;
                  if (steps_in_direction * step > (1 + Math.floor(quarter_turns / 2.0)) * step * ((quarter_turns % 4 % 2) === 0 ? 1 : aspect_ratio)) {
                    steps_in_direction = 0.0;
                    quarter_turns++;
                  }
                  switch(quarter_turns % 4) {
                    case 1:
                      left += step * aspect_ratio + Math.random() * 2.0;
                      break;
                    case 2:
                      top -= step + Math.random() * 2.0;
                      break;
                    case 3:
                      left -= step * aspect_ratio + Math.random() * 2.0;
                      break;
                    case 0:
                      top += step + Math.random() * 2.0;
                      break;
                  }
                } else { // Default settings: elliptic spiral shape
                  radius += step;
                  angle += (index % 2 === 0 ? 1 : -1)*step;

                  left = options.center.x - (width / 2.0) + (radius*Math.cos(angle)) * aspect_ratio;
                  top = options.center.y + radius*Math.sin(angle) - (height / 2.0);
                }
                word_style.left = left + "px";
                word_style.top = top + "px";
              }

              // Don't render word if part of it would be outside the container
              if (options.removeOverflowing && (left < 0 || top < 0 || (left + width) > options.width || (top + height) > options.height)) {
                word_span.remove()
                return;
              }


              already_placed_words.push(word_span[0]);

              // Invoke callback if existing
              if ($.isFunction(word.afterWordRender)) {
                word.afterWordRender.call(word_span);
              }
            };

            var drawOneWordDelayed = function(index) {
              index = index || 0;
              if (!$this.is(':visible')) { // if not visible then do not attempt to draw
                setTimeout(function(){drawOneWordDelayed(index);},10);
                return;
              }
              if (index < word_array.length) {
                drawOneWord(index, word_array[index]);
                setTimeout(function(){drawOneWordDelayed(index + 1);}, 10);
              } else {
                if ($.isFunction(options.afterCloudRender)) {
                  options.afterCloudRender.call($this);
                }
              }
            };

            // Iterate drawOneWord on every word. The way the iteration is done depends on the drawing mode (delayedMode is true or false)
            if (options.delayedMode){
              drawOneWordDelayed();
            }
            else {
              $.each(word_array, drawOneWord);
              if ($.isFunction(options.afterCloudRender)) {
                options.afterCloudRender.call($this);
              }
            }
          };

          // Delay execution so that the browser can render the page before the computatively intensive word cloud drawing
          setTimeout(function(){drawWordCloud();}, 10);
          return $this;
        };
      })(jQuery);
      generateTags();
    });
  
    function generateTags() {
      $(".cover-img").each(function() {
        tags        = []
        str         = $(this).attr("data-value");
        tags_collection = JSON.parse(str);
        $.each(tags_collection, function( index, value ) {
          tags.push({"text":value ,"weight": 8+index});
        });
        tag_id      = $(this).attr("tag-value");
        console.log(tag_id)
        $("#"+tag_id).empty().jQCloud(tags);
      });
    }
</script>
<style type="text/css">
    .bg-transparent {
        background: transparent !important;
        box-shadow: none !important;
    }
    .skill-list::-webkit-scrollbar-thumb{
      background-color: rgb(116, 124, 142); 
    }
    .skill-list{
      max-height:150px;
      overflow-y:auto;
      color: rgb(116, 124, 142);
    }
    .slider {
      background: #d3d3d3;
    }
    .txt-black a {
        color: #2A2C34 !important;
    }
    .candidate-name{
     margin: auto;
     text-align: center;
    }

    .f-mon-bol a {
        color: #fff !important;
    }

    .media .circle {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        font-size: 15px;
        color: #fff;
        padding: 5px;
        text-align: center;
        background: gray;
        display: inline-block;
    }

    .log-prof .circle {
        width: 50px;
        height: 37px;
        border-radius: 50%;
        font-size: 20px;
        color: gray;
        padding: 5px;
        text-align: center;
        display: inline-block;
    }

    .chat_img a {
        color: #fff !important;
    }
</style>